#
# Author: Pablo Olmos de Aguilera Corradini <pablo at glatelier dot org>
#
# Content stolen from more configs that I can keep count of.

# Global Options {{{1

# use C-a instead of C-b as prefix
unbind-key C-b
set  -g prefix C-a

# send prefix to client inside window
bind C-a send-prefix

# amount of time for which status line messages and other indicators are
# displayed (milliseconds)
set  -g display-time 2000

# set vim style key bindings
set  -g status-keys vi
setw -g mode-keys  vi

# turn tmux more responsive; change the default delay
set -sg escape-time 0
set -sg repeat-time 500

# set scrollback
set  -g history-limit 10000

# start numbering at 1
set  -g base-index      1
setw -g pane-base-index 1

# mouse stuff
set  -g mode-mouse           on
set  -g mouse-select-window  on
set  -g mouse-select-pane    on
set  -g mouse-resize-pane    on

# activiy
setw -g monitor-activity     on
set  -g visual-activity      on

# sane window renaming
setw -g set-titles           on
setw -g automatic-rename     on

# use the correct terminfo
set  -g default-terminal     'screen-256color'

# fix shift-{up/down,pgup/pgdown) keys
# set -g terminal-overrides 'xterm*:smcup@:rmcup@'
# set -g terminal-overrides "xterm*:kLFT5=\eOD:kRIT5=\eOC:kUP5=\eOA:kDN5=\eOB:smkx@:rmkx@"
set-option -g xterm-keys on

# Buffer configuration (requires xclip) {{{1

# remap copy and paste keys to a more vimly style
bind Escape copy-mode
bind b list-buffers
bind p paste-buffer
bind P choose-buffer
bind x delete-buffer
bind X command-prompt -p 'Buffer to delete:' "delete-buffer -b %%"
bind -t vi-copy H start-of-line
bind -t vi-copy Home start-of-line
bind -t vi-copy L end-of-line
bind -t vi-copy End end-of-line
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-selection
bind -t vi-copy V rectangle-toggle

# copy text to system clipboard directly from copy mode (need at least tmux 1.8)
bind -t vi-copy C-c copy-pipe 'xclip -selection clipboard -in'

# C-c: save the chosen buffer into system clipboard (+). With preselection.
bind C-c choose-buffer "run \"tmux save-buffer -b %% - | xclip -i -sel clipboard\" \; run \" tmux display \\\"Clipboard \(+\) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" "
# C-c: Copy last used buffer into the system clipboard (+)
# bind C-c run-shell "tmux show-buffer | xclip -sel clip -i" \; display-message "Copied tmux buffer to system clipboard"

# C-v: copy from + clipboard.
# bind C-v run-shell "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer" \; run "tmux display \"Copied from \(+\) $(xclip -o -sel clipboard | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""
bind C-v run-shell "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# C-d: save into selection clipboard (*). With preselection.
bind C-d choose-buffer "run \"tmux save-buffer -b %% - | xclip -i\" \; run \" tmux display \\\"Clipboard \(*\) filled with: $(tmux save-buffer -b %1 - | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \\\" \" "
# C-f: copy from * clipboard.
bind C-f run-shell "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer" \; run "tmux display \"Copied from \(*\) $(xclip -o | dd ibs=1 obs=1 status=noxfer count=80 2> /dev/null)... \""

# Aesthethics {{{1

#set -g status-bg colour234
#set -g status-fg colour231

set -g status-style                 'bg=colour235,fg=colour244'
# set -g status-bg                    colour235 # base02
# set -g status-fg                    colour244 # base0
# set -g status-attr                  none

# default window title colours
setw -g window-status-style         'fg=colour244'
# setw -g window-status-fg            colour244 # base0
# setw -g window-status-bg            default

# active window title colours
setw -g window-status-current-fg    colour230 # base3
setw -g window-status-current-bg    colour61  # violet
setw -g window-status-current-attr  none

# pane
set -g pane-border-fg               colour235 # base02
set -g pane-active-border-fg        colour33  # blue

# pane numbler display
set -g display-panes-active-colour  colour33  # blue
set -g display-panes-colour         colour166 # orange

# message
# are message-bg and message-fg deprecated??
# set -g message-bg                   colour235 # base02
# set -g message-fg                   colour166 # orange
set -g message-style                'bg=colour235,fg=colour166'

# setw -g window-status-activity-fg colour64
# setw -g window-status-activity-bg colour64

# set -g window-status-activity-fg colour64
# set -g window-status-activity-bg colour64
# set -g window-status-activity-style 'fg=cyan'
# setw -g window-status-activity-style 'fg=cyan,blink,bg=red'

# only looks bold...
set-option -gw window-status-activity-attr bold
set-option -gw window-status-activity-bg black
set-option -gw window-status-activity-fg red

# clock
set -g clock-mode-colour            colour64  # green

# Status bar (requires powerline) {{{1

set -g status on
set -g status-utf8 on
set -g status-interval 2
set -g status-left-length 20
set -g status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=default]#(powerline tmux left)'
set -g status-right '#(powerline tmux right)'
set -g status-right-length 150
set -g window-status-format "#[fg=colour244,bg=colour235]#I #[fg=colour240] #[fg=colour249]#W#F "
#set -g window-status-current-format "#[fg=colour235,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour235]"
set -g window-status-current-format "#[fg=colour235]#[fg=colour147] #I.#P  #[fg=default,bold]#W#F #[fg=colour61,bg=colour235]"

# Key bindings {{{1
# Commented stuff means default values

# force a reload of the config file
bind R source-file ~/.tmux.conf \; display "Reloaded!"

# detach client
# bind d detach-client

# choose a client to detach
bind D choose-client

# Windows & panes {{{2
# navigate windows (-n means no prefix)
bind -r h   select-window -t :-
bind -r l   select-window -t :+
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+
bind -n C-Left  select-window -t :-
bind -n C-Right select-window -t :+

# moving between panes (-n means no prefix)
bind -r j   select-pane -t :.-
bind -r k   select-pane -t :.+
bind -r C-j select-pane -t :.-
bind -r C-k select-pane -t :.+
bind -n C-Up    select-pane -t :.+
bind -n C-Down  select-pane -t :.-

# select the last active window
bind C-a last-window

# quick pane cycling
bind -r Tab select-pane -t :.+

# choose window/pane
# bind "'" command-prompt -p 'index window:' "select-window -t ':%%'"
bind "'" choose-window
# bind '"' choose-session

# kill current pane/window
# bind x confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind q confirm-before kill-pane
bind Q confirm-before kill-window

# display visible indicator of each pane
bind w display-panes

# swap panes
bind -r J swap-pane -D
bind -r K swap-pane -U

# splitting panes
unbind %
unbind '"'
bind | split-window -h
bind - split-window -v

# pane resizing
# bind-key -r    M-Up resize-pane -U 5
# bind-key -r  M-Down resize-pane -D 5
# bind-key -r  M-Left resize-pane -L 5
# bind-key -r M-Right resize-pane -R 5

# Miscellaneous {{{2

# run a man page in a new window
bind / command-prompt -p 'Man page:' "split-window 'exec man %%'"

# log output to a text file on demand
bind e pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"

# smart pane switching with awareness of vim splits
# Needs: https://github.com/christoomey/vim-tmux-navigator
# See: http://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# vim:fdm=marker
